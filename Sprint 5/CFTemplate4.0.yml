AWSTemplateFormatVersion: 2010-09-09

Description: Basic Starting point Template

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources: 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: Whiteboard VPC

 ## Subnets
 
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.10.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Public-Subnet-1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.20.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Public-Subnet-2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.30.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Database-Subnet-1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.40.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Database-Subnet-2
  BastionSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.50.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Bastion-Subnet 

## Network and Routing
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Whiteboard-IG
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-RouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
 
  ## Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Webserver Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServer-Security-Group
  
  DBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Ingress to allow webserver access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        -
          Key: Name
          Value: Database-Security-Group
      VpcId: !Ref VPC

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bastion-Security-Group  

## WebServer Instance for Golden AMI
  
## Load Balancer Stuff

  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELBSecurity-Group

  PublicApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

## Target Group
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Webserver-Target-Group


## Autoscaling Group
  WebServerFleet:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: GatewayToInternet
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: '2'
      MaxSize: '8'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Network
          Value: Public
          PropagateAtLaunch: 'true'

## Launch configuration
  WebServerLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      AssociatePublicIpAddress: 'true'
      InstanceMonitoring: 'true'
      BlockDeviceMappings:
        - DeviceName: /dev/sdh
          Ebs:
            VolumeSize: 30
            VolumeType: io1
            Iops: 1000
            DeleteOnTermination: 'false'
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from webserver 3. Trying to update the instances</h1>" > /var/www/html/index.html      


## Database Instances

  MYSQLDBInstanceMain:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !GetAtt DBServerSecurityGroup.GroupId
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: Database-Main
  MYSQLDBInstanceBackup:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !GetAtt DBServerSecurityGroup.GroupId
      SubnetId: !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: Database-Backup

## Bastion Instance
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName 
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
      SubnetId: !Ref BastionSubnet1
      Tags:
        - Key: Name
          Value: Bastion Server Instance


## Storage Buckets

  s3Bucket1:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicRead
      BucketName: wordpress-webobject-bucket-01
      Tags:
        - Key: Name
          Value: wordpress-webobject-bucket
  s3Bucket2:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: whiteboard-cloudtrail-bucket-02
      Tags:
        - Key: Name
          Value: whiteboard-cloudtrail-bucket
  s3Bucket3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled 
      BucketName: whiteboard-codepipeline-bucket-03
      Tags:
        - Key: Name
          Value: whiteboard-codepipeline-bucket
  s3Bucket4:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled 
      BucketName: whiteboard-ec2-backup-bucket-0101
      Tags:
        - Key: Name
          Value: whiteboard-backups-bucket